@model Core.Transcoder.DataAccess.ViewModels.CreateTaskViewModel
@*@{
        ViewBag.Title = "AddConversion";
    }*@
<div class="header" id="content_summary" style="height:150px; margin-bottom:50px; color:white; text-align:left;">
    <div class="container">
        <h2 class="title" style="color:white;">Commander une conversion</h2>
    </div>
</div>
<div class="container">

@using (Html.BeginForm("AddConversion", "Conversion", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    @Html.ValidationSummary(false, "", new { @class = "text-danger" })
    @Html.HiddenFor(m => m.FK_ID_USER)
    <div class="row">
        <div class="col-md-3">
            <div class="heading">
                <div style="height:320px;">
                    <div class="head-1">
                        <img class="img-heading" src="~/Content/Images/download-2.png" />
                        <h4 class="head-1-title" style="">Selectionner un fichier</h4>
                    </div>

                    <div class="contentWrap" style="text-align:center; padding:5px;">
                        <p id="fileName" style="font-weight:bold; color:#5cb85c;overflow: hidden;-o-text-overflow: ellipsis; text-overflow: ellipsis;"></p>
                        <span class="text-danger" id="fileError" style="display:none;">L'élément téléchargé ne peut pas être converti, veuillez en choisir un autre.</span>
                        <div class="fileUpload btn btn-info">

                            <span>Choisir votre fichier</span>
                            <input type="file" name="file" class="upload" id="FileToUpload" />
                        </div>


                        @Html.HiddenFor(m => m.FILE_URL, new { @id = "fileUrl" })
                        @Html.ValidationMessageFor(m => m.FILE_URL, "", new { @class = "text-danger" })

                        @Html.HiddenFor(m => m.LENGTH, new { @id = "fileLength" })
                        @Html.HiddenFor(m => m.FK_ID_FORMAT_BASE, new { @id = "fileFormatBase" })
                        @Html.HiddenFor(m => m.PRICE, new { @id = "filePrice" })
                        @Html.HiddenFor(m => m.DURATION, new { @id = "fileDuration" })

                        <div class="progress" id="progress" style="display:none; width:100%; ">
                            <div id="progressBar" class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%; ">
                                <span id="progressValue"></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-sm-1 media-left media-middle" id="separator-1" style="vertical-align:central;height:320px; display:none;">
            <div class="media">
                <div class="media-left media-middle">

                    <img class="media-object" src="~/Content/Images/arrow.png" style="width:70px;" alt="arrow">
                    <div class="media-body" style="height:320px;">
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-3" id="FormatConversion" style="display:none;">
            <div class="heading">
            <div style="height:320px;">
                <div class="head-2">
                    <img class="img-heading" src="~/Content/Images/choose.png" />
                    <h4 class="head-1-title" style="">Choisir le format de conversion</h4>
                </div>
                <div class="contentWrap">
                    <div class="form-group">
                        @Html.DropDownListFor(m => m.FK_ID_FORMAT_TYPE, Model.slAvailableFormatsTypes, "Selectionner un type de conversion :", new { @id = "ddlFormatTypes", @class = "form-control", @style = "display:none; width:87%;" })
                        @Html.ValidationMessageFor(m => m.FK_ID_FORMAT_TYPE)
                    </div>
                    <div class="form-group">
                        @Html.DropDownListFor(m => m.FK_ID_FORMAT_TO_CONVERT, Model.slAvailableFormats, "Selectionner un format :", new { @id = "ddlFormats", @class = "form-control", @style = "display:none;width:87%;" })
                        @Html.ValidationMessageFor(m => m.FK_ID_FORMAT_TO_CONVERT)
                    </div>
                </div>
            </div>
            </div>
        </div>
        <div class="col-sm-1 media-left media-middle" id="separator-2" style="vertical-align:central;height:320px; display:none;">
            <div class="media">
                <div class="media-left media-middle">

                    <img class="media-object" src="~/Content/Images/arrow.png" style="width:70px;" alt="arrow">
                    <div class="media-body" style="height:320px;">
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-3" id="finalPart"  style="display:none;">
                <div class="heading">
                    <div style="height:320px;">
                        <div class="head-3">
                            <img class="img-heading" src="~/Content/Images/validate.ico" />
                            <h4 class="head-1-title" style="">Valider votre commande</h4>
                        </div>
                        <div class="contentWrap" style="text-align:center; margin-top:8%;">
                           
                            <div style="" id="priceAnnounced">
                                <div class="form-group" style="color:green;">
                                    @Html.LabelFor(m => m.PRICE)
                                </div>
                                <div class="clearfix container" style="width:56%">
                                    <div class="c100 p100 green">
                                        <span id="price"></span>
                                        <div class="slice">
                                            <div class="bar"></div>
                                            <div class="fill"></div>
                                        </div>
                                    </div>
                                </div>
                               <button type="button" id="btnCommander" class="btn btn-success">Commander Maintenant !</button>
                            </div>
                            <div id="userInformations" style="display:none;">
                                @Html.Partial("_ShortUserEdit", Model.ShortEditUserViewModel)
                            </div>
                        </div>
                    </div>
                </div>
            </div>
      
    </div>
    <p style="text-align:right; display:none;" id="btnSection">
        <button type="submit"  id="AddConversion" class="btn btn-success"><span class="glyphicon glyphicon-ok" aria-hidden="true"></span> Ajouter la conversion</button>
    </p>
}
</div>

@section Scripts {

    <script>

        jQuery.extend(jQuery.validator.methods, {
            number: function (value, element) {
                return this.optional(element)
                || /^-?(?:\d+|\d{1,3}(?:\.\d{3})+)(?:,\d+)?$/.test(value)
                || /^-?(?:\d+|\d{1,3}(?:,\d{3})+)(?:\.\d+)?$/.test(value);
            }
        });
        ShowSaveButton();

        $('#FileToUpload').on("change", function () {
            setProgressBarValue("5%");
            console.log($('#FileToUpload').val())
            $("#progress").css("display", "block");

            var formData = new FormData($('form')[0]);
            //$('#FileToUpload').addEventListener("load", function (evt) { URL.revokeObjectURL(docURL); }
            $.ajax({
                url: "@Url.Action("Upload")",
                type: 'POST',
                data: formData,
                async: true,
                cache: false,
                contentType: false,
                processData: false,
                beforeSend: function () {
                    setProgressBarValue("20%");
                },
                success: function (data) {

                    setProgressBarValue("60%");
                    if (data.success == "true") {

                        console.log(data)
                        $("#fileUrl").val(data.fileUrl);
                        $("#fileLength").val(data.fileLength);
                        $("#fileFormatBase").val(data.fileFormatBase);
                        $("#fileDuration").val(data.fileDuration);
                        $("#filePrice").val(data.filePrice);
                        $('#ddlFormatTypes').empty();

                        $("#ddlFormatTypes").append('<option value="0">Type de conversion :</option>');
                        for (var x = 0; x < data.listFormatType.length; x++) {
                            $("#ddlFormatTypes").append('<option value="' + data.listFormatType[x].Value + '">' +
                                    data.listFormatType[x].Text + '</option>');
                        }

                        setProgressBarValue("80%");

                        setTimeout(function () {
                            setProgressBarValue("100%");
                            $("#progressBar").addClass("progress-bar-success");
                            $("#fileName").html(data.fileName);
                        }, 2000);
                        setTimeout(function () {
                            $("#progress").hide();
                            $("#separator-1").show();
                           
                            $("#ddlFormatTypes").val(0);
                            $("#ddlFormatTypes").css("display", "inline-block");
                            $("#FormatConversion").show("slow");
                        }, 3000);

                    }
                    else {
                        $("#progress").css("display", "none");
                        $("#fileError").css("display", "block");
                        $('#FileToUpload').val('');

                    }

                    RefreshJQueryValidator('form');
                    ShowSaveButton();
                }
            });
        });
        $("#ddlFormatTypes").change(function () {

            var value = $("#ddlFormatTypes").val();
            if (value != "0") {
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetFormatByFormatTypeAndFormatBase")',
                    dataType: 'json',
                    data: { formatTypeId: value, fileFormatBase: $("#fileFormatBase").val() },
                    beforeSend: function () {
                       // ShowSaveButton();
                    },
                    success: function (result) {
                        $('#ddlFormats').empty();
                        $("#ddlFormats").append('<option value="0">Format de conversion :</option>');
                        for (var x = 0; x < result.listFormats.length; x++) {
                            $("#ddlFormats").append('<option value="' + result.listFormats[x].Value + '">' +
                                    result.listFormats[x].Text + '</option>');
                        }
                        $("#ddlFormats").val(0);
                        $("#ddlFormats").css("display", "inline-block");
                        RefreshJQueryValidator('form');
                        ShowSaveButton();


                    },
                    error: function (ex) {
                        alert('Error' + ex);
                    }
                });

            }
        });
        $("#ddlFormats").change(function () {
            if ($(this).val() != "0") {
                $("#price").html($("#filePrice").val() + ' €');
                $("#separator-2").show();
                $("#finalPart").show("slow");
                
            }
        });

        $("#btnCommander").click(function () {
            $("#priceAnnounced").hide();
            $("#userInformations").show("slow");
            ShowSaveButton();

        });
        function ShowSaveButton() {
            if ($('#FileToUpload').val() != "" && $("#ddlFormatTypes").val() != "undefined" && $("#ddlFormats").val() != "undefined") {
                if ($('#FileToUpload').val() != "" && $("#ddlFormatTypes").val() != "0" && $("#ddlFormats").val() != "0") {
                    console.log($('#FileToUpload').val() + " - " + $('#ddlFormatTypes').val() + " - " + $('#ddlFormats').val());
                    $("#btnSection").show();
                }
                else {
                    $("#btnSection").css("display", "none");
                }
            }
            else {
                $("#btnSection").hide("fast");
            }
        }
        function RefreshJQueryValidator(divId) {
            var div = $(divId);
            div.removeData("validator");
            div.removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse(div);
        }

        function setProgressBarValue(value) {
            $("#progressBar").css("width", value);
            $("#progressValue").html(value);
        }

    </script>

}
